// Global default params
params {
    input = "samples.txt"
    outdir = "./results"
    publish_dir_mode = "copy"
    kmer_size = 25
    target_depth = 100
    assembler = "rnaspades"
    temp_dir = "./temp"    // Directory for temporary files
    
    // SLURM cluster parameters - all optional
    slurm_account = null    // Optional SLURM account
    slurm_partition = "day-long-cpu"  // Default partition (if not specified by process)
    slurm_qos = null        // Default QOS (if not specified by process)
    
    // Process-specific partition settings
    fastp_partition = "short-cpu"
    seqkit_partition = "day-long-highmem"  // Using highmem for seqkit operations
    merge_partition = "day-long-highmem"
    bbnorm_partition = "week-long-highmem"
    rnaspades_partition = "week-long-highmem"
    trinity_partition = "week-long-highmem"
    busco_partition = "short-cpu"
    
    // Process-specific QOS settings (with null defaults)
    fastp_qos = null
    seqkit_qos = null
    merge_qos = null
    bbnorm_qos = null
    rnaspades_qos = null
    trinity_qos = null
    busco_qos = null
    
    // Skip options
    skip_to_merge = false
    skip_to_assembly = false
    
    // Environment settings
    conda_env_path = "$HOME/miniconda3/envs/nf_transcriptome"  // Default path, can be overridden on command line
    conda_cache_dir = "$HOME/.nextflow/conda"               // Default cache directory
}

// Process-specific resource configurations
process {
    executor = 'slurm'
    conda = params.conda_env_path  // Use parameterized environment path
    
    // Build clusterOptions dynamically with only specified parameters
    clusterOptions = { 
        def options = [] 
        
        if (params.slurm_account) {
            options.add("--account=${params.slurm_account}")
        }
        
        if (params.slurm_partition) {
            options.add("--partition=${params.slurm_partition}")
        }
        
        if (params.slurm_qos) {
            options.add("--qos=${params.slurm_qos}")
        }
        
        return options.join(' ')
    }

    withName: FASTP {
        cpus = 4
        memory = '8 GB'
        time = '2h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.fastp_partition}")
            
            def qos = params.fastp_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: BBNORM {
        cpus = 64
        memory = '240 GB'
        time = '156h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.bbnorm_partition}")
            
            def qos = params.bbnorm_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: RNASPADES {
        cpus = 64
        memory = '500 GB'
        time = '168h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.rnaspades_partition}")
            
            def qos = params.rnaspades_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: TRINITY {
        cpus = 64
        memory = '500 GB'
        time = '168h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.trinity_partition}")
            
            def qos = params.trinity_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
    
    withName: BUSCO {
        cpus = 16
        memory = '32 GB'
        time = '2h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.busco_partition}")
            
            def qos = params.busco_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }

    withName: MERGE_R1 {
        cpus = 8
        memory = '64 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.merge_partition}")
            
            def qos = params.merge_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }

    withName: MERGE_R2 {
        cpus = 8
        memory = '64 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.merge_partition}")
            
            def qos = params.merge_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }

    withName: SEQKIT_QC {
        cpus = 64
        memory = '128 GB'
        time = '24h'
        
        clusterOptions = { 
            def options = []
            
            if (params.slurm_account) {
                options.add("--account=${params.slurm_account}")
            }
            
            options.add("--partition=${params.seqkit_partition}")
            
            def qos = params.seqkit_qos ?: params.slurm_qos
            if (qos) {
                options.add("--qos=${qos}")
            }
            
            return options.join(' ')
        }
    }
}

// Enable conda
conda {
    enabled = true
    useMamba = false
    createTimeout = '1 h'
    cacheDir = params.conda_cache_dir  // Use parameterized cache directory
    environment = "transcriptome"      // The name of your pre-built environment
}

// Remove singularity section
// And keep profiles

profiles {
    standard {
        process.executor = 'local'
    }
    slurm {
        process.executor = 'slurm'
    }
}

// Manifest for pipeline information
manifest {
    name = 'nf-denovo-transcriptome'
    author = 'Jake Lamb'
    description = 'De novo eukaryotic transcriptome assembly pipeline'
    version = '1.0.0'
    nextflowVersion = '>=21.10.0'
}

// Reporting
timeline {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_timeline.html"
    overwrite = true
}
report {
    enabled = true
    file = "${params.outdir}/pipeline_info/execution_report.html"
    overwrite = true
} 
